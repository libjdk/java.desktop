/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class sun_awt_Win32GraphicsDevice */

#ifndef _Included_sun_awt_Win32GraphicsDevice
#define _Included_sun_awt_Win32GraphicsDevice
#ifdef __cplusplus
extern "C" {
#endif
#undef sun_awt_Win32GraphicsDevice_TYPE_RASTER_SCREEN
#define sun_awt_Win32GraphicsDevice_TYPE_RASTER_SCREEN 0L
#undef sun_awt_Win32GraphicsDevice_TYPE_PRINTER
#define sun_awt_Win32GraphicsDevice_TYPE_PRINTER 1L
#undef sun_awt_Win32GraphicsDevice_TYPE_IMAGE_BUFFER
#define sun_awt_Win32GraphicsDevice_TYPE_IMAGE_BUFFER 2L
/*
 * Class:     sun_awt_Win32GraphicsDevice
 * Method:    initIDs
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_sun_awt_Win32GraphicsDevice_initIDs
  (JNIEnv *, jclass);

/*
 * Class:     sun_awt_Win32GraphicsDevice
 * Method:    initDevice
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_sun_awt_Win32GraphicsDevice_initDevice
  (JNIEnv *, jobject, jint);

/*
 * Class:     sun_awt_Win32GraphicsDevice
 * Method:    initNativeScale
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_sun_awt_Win32GraphicsDevice_initNativeScale
  (JNIEnv *, jobject, jint);

/*
 * Class:     sun_awt_Win32GraphicsDevice
 * Method:    setNativeScale
 * Signature: (IFF)V
 */
JNIEXPORT void JNICALL Java_sun_awt_Win32GraphicsDevice_setNativeScale
  (JNIEnv *, jobject, jint, jfloat, jfloat);

/*
 * Class:     sun_awt_Win32GraphicsDevice
 * Method:    getNativeScaleX
 * Signature: (I)F
 */
JNIEXPORT jfloat JNICALL Java_sun_awt_Win32GraphicsDevice_getNativeScaleX
  (JNIEnv *, jobject, jint);

/*
 * Class:     sun_awt_Win32GraphicsDevice
 * Method:    getNativeScaleY
 * Signature: (I)F
 */
JNIEXPORT jfloat JNICALL Java_sun_awt_Win32GraphicsDevice_getNativeScaleY
  (JNIEnv *, jobject, jint);

/*
 * Class:     sun_awt_Win32GraphicsDevice
 * Method:    getMaxConfigsImpl
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_sun_awt_Win32GraphicsDevice_getMaxConfigsImpl
  (JNIEnv *, jobject, jint);

/*
 * Class:     sun_awt_Win32GraphicsDevice
 * Method:    isPixFmtSupported
 * Signature: (II)Z
 */
JNIEXPORT jboolean JNICALL Java_sun_awt_Win32GraphicsDevice_isPixFmtSupported
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     sun_awt_Win32GraphicsDevice
 * Method:    getDefaultPixIDImpl
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_sun_awt_Win32GraphicsDevice_getDefaultPixIDImpl
  (JNIEnv *, jobject, jint);

/*
 * Class:     sun_awt_Win32GraphicsDevice
 * Method:    enterFullScreenExclusive
 * Signature: (ILjava/awt/peer/WindowPeer;)V
 */
JNIEXPORT void JNICALL Java_sun_awt_Win32GraphicsDevice_enterFullScreenExclusive
  (JNIEnv *, jobject, jint, jobject);

/*
 * Class:     sun_awt_Win32GraphicsDevice
 * Method:    exitFullScreenExclusive
 * Signature: (ILjava/awt/peer/WindowPeer;)V
 */
JNIEXPORT void JNICALL Java_sun_awt_Win32GraphicsDevice_exitFullScreenExclusive
  (JNIEnv *, jobject, jint, jobject);

/*
 * Class:     sun_awt_Win32GraphicsDevice
 * Method:    getCurrentDisplayMode
 * Signature: (I)Ljava/awt/DisplayMode;
 */
JNIEXPORT jobject JNICALL Java_sun_awt_Win32GraphicsDevice_getCurrentDisplayMode
  (JNIEnv *, jobject, jint);

/*
 * Class:     sun_awt_Win32GraphicsDevice
 * Method:    configDisplayMode
 * Signature: (ILjava/awt/peer/WindowPeer;IIII)V
 */
JNIEXPORT void JNICALL Java_sun_awt_Win32GraphicsDevice_configDisplayMode
  (JNIEnv *, jobject, jint, jobject, jint, jint, jint, jint);

/*
 * Class:     sun_awt_Win32GraphicsDevice
 * Method:    enumDisplayModes
 * Signature: (ILjava/util/ArrayList;)V
 */
JNIEXPORT void JNICALL Java_sun_awt_Win32GraphicsDevice_enumDisplayModes
  (JNIEnv *, jobject, jint, jobject);

/*
 * Class:     sun_awt_Win32GraphicsDevice
 * Method:    makeColorModel
 * Signature: (IZ)Ljava/awt/image/ColorModel;
 */
JNIEXPORT jobject JNICALL Java_sun_awt_Win32GraphicsDevice_makeColorModel
  (JNIEnv *, jobject, jint, jboolean);

#ifdef __cplusplus
}
#endif
#endif
